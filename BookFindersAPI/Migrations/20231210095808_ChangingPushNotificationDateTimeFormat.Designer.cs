// <auto-generated />
using System;
using BookFindersAPI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookFindersAPI.Migrations
{
    [DbContext(typeof(ProductionDatabase))]
    [Migration("20231210095808_ChangingPushNotificationDateTimeFormat")]
    partial class ChangingPushNotificationDateTimeFormat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookFindersLibrary.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PostDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ThumbsUp")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("_comment");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("X")
                        .HasColumnType("float");

                    b.Property<float>("Y")
                        .HasColumnType("float");

                    b.Property<float>("Z")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("_coordinates");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.PushNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("_pushNotifications");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.UserLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("XCoordinate")
                        .HasColumnType("double");

                    b.Property<double>("YCoordinate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("_locations");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.UserTrackingInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoordinateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserTrackingSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoordinateId");

                    b.HasIndex("UserTrackingSessionId");

                    b.ToTable("_userTrackingInstances");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.UserTrackingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeEnded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeStarted")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("_userTrackingSessions");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.UserTrackingInstance", b =>
                {
                    b.HasOne("BookFindersLibrary.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookFindersLibrary.Models.UserTrackingSession", null)
                        .WithMany("Locations")
                        .HasForeignKey("UserTrackingSessionId");

                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("BookFindersLibrary.Models.UserTrackingSession", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
